@font-face { 
    src:
        local('Libertinus Mono'), 
        url('../../assets/LibertinusMono-Regular.ttf') format('truetype');
    font-family: 'Libertinus Mono';
    font-weight: 400;
    font-style: normal;
}

:root 
{
    --clr-txt: #343A40;
    --clr-bkg: hsl(210, 17%, 98%);
    --page-inline-padding: 2vw;
}

*,
*::before,
*::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    background-color: var(--clr-bkg);
    font-family: 'Libertinus Mono', monospace;
    display: flex;    
}

main {
    flex-grow: 2;
    max-width: 1200px;
    padding-block: 2vh;
    padding-inline: var(--page-inline-padding);
    height: 100vh;
    overflow-y: scroll;
    scrollbar-width: none;
    /* Otherwise open-website-nav-btn may cover some content at the bottom of the page */
    padding-bottom: 10vh;
}

main > * {
    margin-inline: auto;
}

a, button, textarea, input {
    font-family: inherit;
}

.info-msg {
    padding-top: 2rem;
    margin-inline: auto;
    max-width: 70ch;
    font-size: 1.2rem;
    text-align: center;
}

.cards-container > * {
    margin-inline: auto;
}

.cards-container:empty {
    padding-top: 2rem;
    max-width: 70ch;
    font-size: 1.2rem;
    text-align: center;
}

p {
    line-height: 1.4;
}

/*
 *
 *  Side Nav
 */

#side-nav {
    --profile-pic-size: 60px;
    --bullet-size: .3em;
    --list-fs: 1.5rem;

    font-size: var(--list-fs);
    padding: 1.2em;
    height: 100vh;
    background-color: var(--clr-bkg);
}

#side-nav ul {
    font-size: inherit;
    line-height: 1.4;
    list-style: none;
    /* avoid 'create-account' link from wrapping onto two lines */
    white-space: nowrap;

    /* Experiment: I saw that now it is possible to write nested CSS. */
    li {
        /* for the bullet made with ::before */
        position: relative;

        a {
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }
    }
}

#side-nav li[itemprop=profile] {
    margin-bottom: .5em;
    width: fit-content;
}

#side-nav li:not(li[itemprop=profile]) {
    margin-bottom: .25em;
    padding-left: calc(var(--bullet-size)*3); 
}

/* Apply this margin only when the profile-pic is present. */
#side-nav:has(li[itemprop=profile]) li:not(li[itemprop=profile]) {
    /* This margin is to align the bullets with the profile pic 
    and equally space left and right of the list items. */
    margin-inline: calc(var(--profile-pic-size)/2 - var(--bullet-size)/2);
}

#side-nav li:not(li[itemprop=profile])::before {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    
    width: var(--bullet-size);
    aspect-ratio: 1;
    border-radius: 100%;
    background-color: var(--circle-color);
}

#side-nav a[href=profile] > span {
    display: block;
    width: var(--profile-pic-size);
    /* I don't use aspect-ratio, so I can regulate them separately.
    E.g. when I collapse the nav. */
    height: var(--profile-pic-size);
    background-color: white;
    border-radius: 100%;
    overflow: hidden;
    position: relative;
    box-shadow: 0 0px 3px #ccc;
}

#side-nav a[href=profile] > span:hover {
    box-shadow: 0 2px 4px 1px #ccc;
}

#side-nav a[href=profile] > span .circle {
    position: absolute;
    aspect-ratio: 1;
    border-radius: 100%;
}

#side-nav > button {
    /* only for desktop */
    display: none;
    margin-top: 5vh;
    background: unset;
    border: unset;
    font-size: 2rem;
    color: rgb(106 106 106);
    border-radius: 8px;
} 

#minify-nav-btn {
    padding-right: .5em;
    margin-left: auto;
}
#expand-nav-btn {
    padding-left: .5em;
    margin-inline: auto;
}

#side-nav > button:hover {
    background-color: rgb(237, 237, 237);
}

@media (max-width: 1189px) 
{    
    #side-nav {
        box-shadow: -2px 0px 8px #ccc;
        position: fixed;
        bottom: 0;
        right: 0;
        min-width: 35vw;
    }

    #open-side-nav-btn {
        position: fixed;
        bottom: 2vh;
        right: 3vw;
        /* Override default padding of .secondary-btn */
        padding: .75rem .65rem;
    }

    #open-side-nav-btn span[role=img] > span {
        margin-bottom: .65rem;   
        display: flex;
        align-items: center;
    }

    #open-side-nav-btn span[role=img] > span:last-child {
        margin-bottom: 0;
    }

    #open-side-nav-btn .bullet {
        --circle-color: #676767;
        display: inline-block;
        height: 5px;
        aspect-ratio: 1;
        background-color: var(--circle-color);
        border-radius: 100%;
        margin-right: .25em;
    }

    #open-side-nav-btn .row {
        display: inline-block;
        width: 32px;
        height: 3px;
        border-radius: 8px;
        background-color: var(--clr-txt);
    }
}

@media (min-width: 1190px) 
{
    body {
        display: flex;
        align-items: start;
        justify-content: center;
    }

    #side-nav {
        --profile-pic-size: 70px;
        --list-fs: 2rem;
        display: block;
        /* box-shadow: -1px 0 0 #ccc; */
        border-left: 1px solid #ccc;
    }

    #side-nav > button.display-block {
        display: block;
    }

    #side-nav:has(.minified-list) {
        border-left: unset;
        padding-left: 0;
    }

    .minified-list li {
        padding-inline: 0 !important;
        margin-inline: 0 !important;
    }

    #side-nav:has(.minified-list) a[href=profile] > span {
        width: 0;
    }

    /* .minified-list li a:not(a[href=profile]) { */
    .minified-list li a {
        visibility: hidden;
        font-size: 0;
        /* display: inline-block; */
        /* width: 0; */
        /* overflow: hidden; */
    }  

    .minified-list li::before {
        display: none;
    }  

    #side-nav:has(.minified-list) > button {
        margin-inline: 0;
    }
    
    #open-side-nav-btn {
        display: none;
    }
}

/* 
 * Color-specific customization */

#open-side-nav-btn span[itemprop=index] .bullet,
#side-nav li[itemprop=index]::before {
    --circle-color: #10b981;
}

#open-side-nav-btn span[itemprop=write-post] .bullet,
#side-nav li[itemprop=write-post]::before {
    --circle-color: #1ec8de;
}

#open-side-nav-btn span[itemprop=login] .bullet,
#side-nav li[itemprop=login]::before {
    --circle-color: #4affc3;
}

#open-side-nav-btn span[itemprop=create-account] .bullet,
#side-nav li[itemprop=create-account]::before {
    --circle-color: #ff8725;
}

#open-side-nav-btn span[itemprop=notifications] .bullet,
#side-nav li[itemprop=notifications]::before {
    --circle-color: #3b82f6;
}

#open-side-nav-btn span[itemprop=profile] .bullet,
#side-nav li[itemprop=profile]::before {
    --circle-color: #d359f8;
}
#side-nav li[itemprop=profile]::before {
    border: none;
}

#open-side-nav-btn span[itemprop=logout] .bullet,
#side-nav li[itemprop=logout]::before {
    --circle-color: #ff793f;
}

#open-side-nav-btn span[itemprop=delete-account] .bullet,
#side-nav li[itemprop=delete-account]::before {
    --circle-color: #840000;
} 


/*
 *
 *  States
 */

/* I created these states because sometimes in JS you may write e.g. 'div.style.display = "flex"',
but, by doing so, you embed CSS in the HTML ==> '<div style="display: flex"></div>',
that has higher priority compared to the CSS classes. 
And so, sometimes elements are shown/hidden unexpectedly because of the usage different specificities (especially in a big codebase).
Therefore, I modify the state only via these CSS classes. */

.display-block {
    display: block;
}

/* to 'flex' and 'hidden' I don't add the prefix 'display'
because it's pretty clear that's about displaying. */

.flex {
    display: flex;
}

.hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip-path: rect(0 0 0 0);
    white-space: nowrap;
    border: 0;
}

.display-none {
    display: none;
}

.vanish {
    animation: vanish 3s ease-in-out;
    animation-fill-mode: forwards;
}

@keyframes vanish {
      0% { display: flex; opacity: 1; }
     50% { opacity: 1; }
    100% { display: none; opacity: 0; }
}

.display-opaque {
    opacity: .5;
}
.display-opaque a,
.display-opaque button {
    pointer-events: none;
}

.selected {
    background-color: rgb(255, 185, 56);
}


/*
 *
 *  Buttons
 */

button {
    cursor: pointer;
    color: var(--clr-txt);
}

.primary-btn {
    border-radius: 12px;
    border-width: 1px;
    background: linear-gradient(180deg, #ffffff 0%, #e8e8e8 100%);
    border: 1px solid #ababab;
    transition: all 0.035s ease;
    user-select: none;
    box-shadow: 
        0 2px 0 #b8b8b8,
        0 4px 6px rgba(0, 0, 0, 0.1);
    transform: translateY(0);
    font-size: 1rem;
    padding-block: .67em;
    padding-inline: 1.2em;
}

@media (min-width: 500px) {
    .primary-btn {
        font-size: 1.2rem;
    }
}

.primary-btn:hover {
    background: linear-gradient(180deg, #f8f8f8 0%, #e0e0e0 100%);
    transform: translateY(-1px);
    box-shadow: 
        0 3px 0 #b8b8b8,
        0 6px 8px rgba(0, 0, 0, 0.12);
}

.primary-btn:active {
    transform: translateY(1px);
    box-shadow: 
        0 1px 0 #b8b8b8,
        0 2px 4px rgba(0, 0, 0, 0.15);
    background: linear-gradient(180deg, #e8e8e8 0%, #d8d8d8 100%);
}

.secondary-btn {
    font-size: 1.1rem;
    padding: .25em .5em;
    border-radius: 8px;
    border: 1px solid #ababab;
    transition: all 0.035s ease;
    user-select: none;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

.secondary-btn:hover {
    border-color: #999;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
}

.secondary-btn:active {
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    transform: translateY(1px);
}

@media (min-width: 500px) {
    .secondary-btn {
        font-size: 1.2rem;
    }
}


/*
 *
 *  Cards
 */

.card {
    --text-line-length: 70ch;
    --padding: 1em;
    --border-thickness: 1px;
    --card-max-width: calc(var(--text-line-length) + var(--padding)*2 + var(--border-thickness)*2);

    font-size: 1rem;
    padding: var(--padding);
    border: 1px solid #ccc;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    max-width: var(--card-max-width);
}

.card p {
    color: var(--clr-txt);
    line-height: 1.4;
    /* max-width: var(--text-line-length); */
    /* width: 100%; */

    /* Keep extra whitespaces and newlines.
    A side-effect of this property is that if the text is selected,
    the selection overflows a bit the card. */
    white-space: pre-wrap; 
}

.card time,
.card a {
    font-size: .9rem;
}

.card.deleting 
{
    transition: all .3s ease-out;
    transform-origin: top;
    opacity: 0;
    transform: scaleY(0);
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    max-height: 0;
}

@media (min-width: 500px) {
    .card {
        font-size: 1.2rem;
    }

    .card time,
    .card a {
        font-size: initial;
    }
}

.post-card {
    background-color: #f5f5f5;
}

.reply-card {
    background-color: #fcfcfc;
}

.notification-card {
    background-color: #f1f1f1;
}

.post-card time,
.reply-card time {
    display: block;
    text-align: right;
    padding-top: 1em;
    color: rgb(72, 72, 72);
}

.post-card a {
    display: inline-block;
    margin-top: .5em;
}

.notification-card footer,
.post-card footer {
    margin-top: 1em;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.notification-card button,
.post-card button {
    font-size: 1rem;
}

.notification-card > footer > button:hover,
.post-card > footer > button:hover {
    background-color: #ff8282;
    color: #0a0a0a;
}

.feedback-card {    
    border-radius: 8px;
    border: unset;
    border-left: 4px solid;
    background-color: white;
    transition: transform 0.2s ease, box-shadow 0.2s ease;

    /* For the close button ('x') that has position absolute. */
    position: relative;
}

.feedback-card span[role=img] {
    /* I don't want the text inside the icon to be regulated based on user rem. */
    font-size: 13px;
    height: 22px;
    aspect-ratio: 1;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: white;
    user-select: none;
}

.feedback-card p {
    padding-inline: 1em;
    /* Override */
    white-space: unset;
}

.feedback-card p .type {
    font-weight: 600;
    font-size: 1.1rem;
    margin-bottom: .2em;
    line-height: initial;
    display: block;
    text-transform: capitalize;
}

.feedback-card p .msg {
    font-size: 1rem;
    opacity: 0.8;
    max-width: 70ch;
    white-space: pre-wrap; 
    color: #374151;
}

.feedback-card .close-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    border: none;
    background: none;
    opacity: 0.5;
    font-size: 16px;
    width: 25px;
    height: 25px;
    border-radius: 50%;
    
    display: flex;
    align-items: center;
    justify-content: center;

    transition: opacity 0.2s ease, background-color 0.2s ease;
}

.feedback-card .close-btn:hover {
    opacity: 1;
    background-color: rgba(0, 0, 0, 0.1);
}

@media (min-width: 500px) 
{
    .feedback-card span[role=img] {
        font-size: 16px;
        height: 25px;
    }

    .feedback-card p .type {
        font-size: 1.3rem;
    }

    .feedback-card p .msg {
        font-size: 1.1rem;
    }
}

.feedback-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.info {
    border-left-color: #3b82f6;
}
.info span[role=img] {
    background-color: #3b82f6;
}
.info p .type {
    color: #1e40af;
}

.success {
    border-left-color: #10b981;
}
.success span[role=img] {
    background-color: #10b981;
}
.success p .type {
    color: #047857;
}

.warning {
    border-left-color: #ff8228;
}
.warning span[role=img] {
    background-color: #ff8228;
}
.warning p .type {
    color: #e0640c;
}

.error {
    border-left-color: #ef4444;
}
.error span[role=img] {
    background-color: #ef4444;
}
.error p .type {
    color: #d31a1a;
}


/*
 *
 *  Form
 */

form {
    --text-line-length: 70ch;
    --input-padding: 1.2rem;
    --border-thickness: 1px;

    font-size: 1.2rem;
    max-width: calc(var(--text-line-length) + var(--input-padding)*2 + var(--border-thickness)*2);
}

form > input {
    padding: var(--input-padding);
    font-size: inherit;
    line-height: 1.4;
    width: 100%;
}

form > textarea {
    padding: var(--input-padding);
    font-size: inherit;
    line-height: 1.4;
    width: 100%;
    resize: vertical;
}

form > button[type=submit] {
    display: block;
    margin-top: .5rem;
}

form > .feedback-card {
    margin-block: 5px;
}
